#include<iostream>
#include<math.h>
using namespace std;


int main()
{
	int n = 0;  //输入，用二维数组存储大数
	char s = ' ', a[128][3000] = {};
	cin >> n;
	getchar();
	int minus = 0, len = 0;
	for (int i = 0; i < n; i++)
	{
		cin >> a[i];
		len = 0;
		while (true)
		{
			if (a[i][len+1] != '\0') len++;
			else break;
		}
		s = a[i][0];
		if (s == '+')
		{
			for (int j = 0; j <= len; j++)
			{
				a[i][j] = a[i][j + 1];
			}
			while (true)
			{
				if (a[i][0] == '0')
				{
					for (int j = 0; j <= len; j++)
					{
						a[i][j] = a[i][j + 1];
					}
				}
				else if (a[i][0] == '\0')
				{
				a[i][0] = '0';
				break;
				}
				else break;
			}
		}
		else if (s == '-')
		{
			while (true)
			{
				if (a[i][1] == '0')
				{
					for (int j = 1; j <= len; j++)
					{
						a[i][j] = a[i][j + 1];
					}
				}
				else if (a[i][1] == '\0')
				{
					a[i][0] = '0';
					a[i][1] = ' ';
					break;
				}
				else break;
			}
		}
		else
		{
			while (true)
			{
				if (a[i][0] == '0')
				{
					for (int j = 0; j <= len; j++)
					{
						a[i][j] = a[i][j + 1];
					}
				}
				else if (a[i][0] == '\0')
				{
					a[i][0] = '0';
					break;
				}
				else break;
			}
		}
		getchar();
	}



	int ilen = 0, wlen = 0, b[128] = {};  //对每个大数，找相同数的个数
	for (int w = 0; w < n; w++)
	{
		wlen = 0;
		while (true)
		{
			if (((int)a[w][wlen + 1] >= 48) && ((int)a[w][wlen + 1] <= 57)) wlen++;
			else break;
		}
		for (int i = 0; i < n; i++)
		{
			ilen = 0;
			while (true)
			{
				if (((int)a[i][ilen + 1] >= 48) && ((int)a[i][ilen + 1] <= 57)) ilen++;
				else break;
			}
			int flag = 1, j = 0;
			for (int j = 0; j < 3000; j++)
			{
				if (flag == 0) break;
				else
				{
					if ((((int)a[w][j] >= 48) && ((int)a[w][j] <= 57)) || ((int)a[w][j] == 45))
					{
						if (a[i][j] != a[w][j]) flag = 0;
					}
				}
			}
			if ((flag == 1) && (ilen == wlen)) b[w]++;
		}
	}


	int aflag = 0, bflag = 0, max = 0;
	max = b[0];
	for (int i = 0; i < n; i++) //找最大值
	{
		if (max < b[i]) max = b[i];
	}

	if (max == n) printf("no");
	else
	{
		for (int i = 0; i < n; i++)
		{
			if (b[i] == max)
			{
				bflag = i;
				break;
			}
		}
		int j = 0;
		while (true)
		{
			if ((((int)a[bflag][j] >= 48) && ((int)a[bflag][j] <= 57)) || ((int)a[bflag][j] == 45))
			{
				cout << a[bflag][j];
					j++;
			}
			else break;
		}
	}
	return 0;
}